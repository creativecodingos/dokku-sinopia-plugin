#!/usr/bin/env bash
set -e;

HOST_DIR="$DOKKU_ROOT/.sinopia"
DATA_DIR="$HOST_DIR/.data"
BACKUPS_DIR="$HOST_DIR/backups"

SINOPIA_IMAGE=$(docker images | grep creativecoding/sinopia | awk '{print $1}')
SINOPIA_CONTAINER=$(docker ps -a | grep sinopia-registry | awk '{print $1}')
SINOPIA_CONTAINER_RUNNING=$(docker ps | grep sinopia-registry | awk '{print $1}')
SINOPIA_STORAGE_IMAGE=$(docker images | grep creativecoding/sinopia-storage | awk '{print $1}')
SINOPIA_STORAGE_CONTAINER=$(docker ps -a | grep sinopia-storage | awk '{print $1}')

build_sinopia_image() {
  echo
  echo "-----> Sinopia image not found. Building..."
  docker build -q=true -t creativecoding/sinopia github.com/creativecodingos/dokku-sinopia-dockerfiles.git > /dev/null
  echo "       Image builded as creativecoding/sinopia"
  echo
}

build_sinopia_storage_image() {
  echo
  echo "-----> Sinopia storage image not found. Building..."
  docker build -q=true -t creativecoding/sinopia-storage github.com/creativecodingos/dokku-sinopia-storage-dockerfiles.git > /dev/null
  echo "       Image builded as creativecoding/sinopia-storage"
  echo
}

init_storage_container() {
  echo "-----> Initializing the sinopia storage container..."
  SINOPIA_STORAGE_CONTAINER=$(docker run -d --name sinopia-storage creativecoding/sinopia-storage /bin/bash "exit 0")
  docker wait $SINOPIA_STORAGE_CONTAINER > /dev/null
  echo "       Done."
  echo
}

run_sinopia_container() {
  echo "-----> Starting Sinopia container..."
  SINOPIA_CONTAINER=$(docker run -d -P --name sinopia-registry --volumes-from sinopia-storage creativecoding/sinopia)
  SINOPIA_CONTAINER_RUNNING=$SINOPIA_CONTAINER
  sleep 5
  echo "       Done."
  echo
}

backup_sinopia() {
  echo
  echo "-----> Starting backup of Sinopia"
  echo 
  NOW=$(date -u +"%Y-%m-%dT%H.%M.%SZ")
  BACKUP_FILE="Sinopia_backup_$NOW"
  ID=$(docker run -d --volumes-from sinopia-storage -v $BACKUPS_DIR:/backups creativecoding/sinopia cd /data/sinopia && tar -czv /backups/$BACKUP_FILE .)
  docker wait $ID > /dev/null
  docker rm $ID
  echo
  echo "-----> Backup file avaliable: $BACKUPS_DIR/$BACKUP_FILE"
  echo
}

case "$1" in
  
  sinopia)
    if [[ ! -d $HOST_DIR ]]; then
      mkdir -p $DATA_DIR
      mkdir -p $BACKUPS_DIR
    fi
    
    if [[ -z $SINOPIA_IMAGE ]]; then
      build_sinopia_image
    fi
    if [[ -z $SINOPIA_STORAGE_IMAGE ]]; then
      build_sinopia_storage_image
    fi
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      init_storage_container
    fi
    if [[ -z $SINOPIA_CONTAINER ]]; then
      run_sinopia_container
    fi
    
    SINOPIA_IP=$(docker inspect $SINOPIA_CONTAINER | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    if [[ -z $SINOPIA_CONTAINER_RUNNING ]]; then
      SINOPIA_STATUS="stopped"
    else
      SINOPIA_STATUS="running"
    fi
    
    echo
    echo "-----> Infos about Sinopia registry:"
    echo
    echo "       Status: $SINOPIA_STATUS"
    echo "       Container: $SINOPIA_CONTAINER"
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
    echo "       Container IP: $SINOPIA_IP"
    echo "       Container PORT: 4873"
    fi
    echo
    ;;
    
  sinopia:stop)
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
      echo
      echo "-----> Stopping Sinopia container"
      ID=$(docker stop $SINOPIA_CONTAINER_RUNNING)
      docker wait $ID > /dev/null
      echo "       Done."
      echo
      dokku sinopia
    else
      echo
      echo "       Sinopia container is not running"
      echo
    fi
    ;;
    
  sinopia:start)
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
      echo
      echo "-----> Sinopia is already running"
      echo
      dokku sinopia
      exit 0
    else
    
      if [[ -z $SINOPIA_CONTAINER ]]; then
        dokku sinopia
      else
        echo
        echo "-----> Restarting Sinopia container..."
        docker start $SINOPIA_CONTAINER > /dev/null
        sleep 5
        echo "       Done."
        dokku sinopia
      fi
      
    fi
    ;;
    
  sinopia:expose)
    echo "expose"
    ;;
  
  sinopia:hide)
    echo "hide"
    ;;
    
  sinopia:backup)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    backup_sinopia
    ;;
    
  sinopia:reconfig)
    echo "reconfig"
    ;;
    
  sinopia:remove)
    
    ;;

  help)
    cat && cat<<EOF
    sinopia                     Get infos about the private sinopia registry
    sinopia:expose              Binds the sinopia container to a higher port on host (restarts sinopia)
    sinopia:hide                Unbinds the sinopia container from a port on host (restarts sinopia)
    sinopia:backup              Backups the sinopia storage folder
    sinopia:reconfig            Updates the sinopia config (restarts sinopia)
    sinopia:remove              Deletes the sinopia containers and the sinopia folder on dokku host
EOF
    ;;

esac
