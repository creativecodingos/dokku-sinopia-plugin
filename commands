#!/usr/bin/env bash
set -e;

HOST_DIR="$DOKKU_ROOT/.sinopia"
BACKUPS_DIR="$HOST_DIR/backups"
CONFIG_FILE="$HOST_DIR/config.yaml"

SINOPIA_IMAGE=$(docker images | grep creativecoding/sinopia | awk '{print $1}')
SINOPIA_CONTAINER=$(docker ps -a | grep sinopia-registry | awk '{print $1}')
SINOPIA_CONTAINER_RUNNING=$(docker ps | grep sinopia-registry | awk '{print $1}')
SINOPIA_STORAGE_IMAGE=$(docker images | grep creativecoding/sinopia-storage | awk '{print $1}')
SINOPIA_STORAGE_CONTAINER=$(docker ps -a | grep sinopia-storage | awk '{print $1}')

build_sinopia_image() {
  echo
  echo "-----> Sinopia image not found. Building..."
  docker build -q=true -t creativecoding/sinopia github.com/creativecodingos/dokku-sinopia-dockerfiles.git > /dev/null
  echo "       Image builded as creativecoding/sinopia"
  echo
}

# We use the data only container pattern
# http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/
build_sinopia_storage_image() {
  echo
  echo "-----> Sinopia storage image not found. Building..."
  docker build -q=true -t creativecoding/sinopia-storage github.com/creativecodingos/dokku-sinopia-storage-dockerfiles.git > /dev/null
  echo "       Image builded as creativecoding/sinopia-storage"
  echo
}

init_storage_container() {
  echo "-----> Initializing the sinopia storage container..."
  SINOPIA_STORAGE_CONTAINER=$(docker run -d --name sinopia-storage creativecoding/sinopia-storage /bin/bash "exit 0")
  docker wait $SINOPIA_STORAGE_CONTAINER > /dev/null
  echo "       Done."
  echo
}

run_sinopia_container() {
  echo
  echo "-----> Starting Sinopia container..."
  SINOPIA_CONTAINER=$(docker run -d -P --name sinopia-registry --volumes-from sinopia-storage creativecoding/sinopia)
  SINOPIA_CONTAINER_RUNNING=$SINOPIA_CONTAINER
  sleep 5
  ## copy the running config.yaml to the host for user editing
  ID=$(docker run -d --volumes-from sinopia-storage -v $HOST_DIR:/sinopia  ubuntu /bin/bash -c "cp /data/sinopia/config.yaml /sinopia/config.yaml")
  docker wait $ID > /dev/null
  docker rm $ID > /dev/null
  echo "       Done."
  echo
}

backup_sinopia() {
  echo
  echo "-----> Starting backup of Sinopia"
  echo 
  NOW=$(date -u +"%Y-%m-%dT%H.%M.%SZ")
  BACKUP_FILE="Sinopia_backup_$NOW.tar.gz"
  BACKUP_FILE_PATH="$BACKUPS_DIR/$BACKUP_FILE"
  ID=$(docker run -d --volumes-from sinopia-storage -v $BACKUPS_DIR:/backups ubuntu tar -czf /backups/$BACKUP_FILE -C /data ./sinopia)
  docker wait $ID > /dev/null
  docker rm $ID > /dev/null
  echo
  echo "-----> Backup file avaliable: $BACKUP_FILE_PATH"
  echo
  
  S3_FILE="$HOST_DIR/S3"
  if [[ -f $S3_FILE ]]; then
    echo
    echo "-----> Detected S3 configuration file"
    echo
    s3_backup $BACKUP_FILE_PATH $BACKUP_FILE $S3_FILE
  fi
}

HMAC-SHA256s(){
  KEY="$1"
  DATA="$2"
  shift 2
  printf "$DATA" | openssl dgst -binary -sha256 -hmac "$KEY" | od -An -vtx1 | sed 's/[ \n]//g' | sed 'N;s/\n//'
}

HMAC-SHA256h(){
  KEY="$1"
  DATA="$2"
  shift 2
  printf "$DATA" | openssl dgst -binary -sha256 -mac HMAC -macopt "hexkey:$KEY" | od -An -vtx1 | sed 's/[ \n]//g' | sed 'N;s/\n//'
}

s3_backup() {
  BACKUP_FILE_PATH=$2
  BACKUP_FILE=$3
  S3_FILE=$4
  
  source "$BACKUP_FILE_PATH"
  
  if [ -n "$S3_KEY" ] && [ -n "$S3_SECRET" ] && [ -n "$BUCKET" ] && [ -n "$REGION" ]; then
    echo
    echo "-----> Starting file transfer of $BACKUP_FILE"
    echo

    CONTENT_TYPE="application/octet-stream"

    if [[ -n "$PREFIX" ]]; then
      KEY="$PREFIX/$BACKUP_FILE"
    else
      KEY="$BACKUP_FILE"
    fi


    REQUEST_TIME=$(date +"%Y%m%dT%H%M%SZ")
    REQUEST_DATE=$(printf "${REQUEST_TIME}" | cut -c 1-8)
    AWS4SECRET="AWS4"$S3_SECRET
    ALGORITHM="AWS4-HMAC-SHA256"
    EXPIRE=$(date --date="+30 minutes" -u +"%Y-%m-%dT%H:%M:%SZ")
    ACL="private"

    POST_POLICY='{"expiration":"'$EXPIRE'","conditions": [{"bucket":"'$BUCKET'" },{"acl":"'$ACL'" },["starts-with", "$key", "'$KEY'"],["eq", "$Content-Type", "application/octet-stream"],{"x-amz-credential":"'$S3_KEY'/'$REQUEST_DATE'/'$REGION'/s3/aws4_request"},{"x-amz-algorithm":"'$ALGORITHM'"},{"x-amz-date":"'$REQUEST_TIME'"}]}'

    UPLOAD_REQUEST=$(printf "$POST_POLICY" | openssl base64 )
    UPLOAD_REQUEST=$(echo -en $UPLOAD_REQUEST |  sed "s/ //g")

    SIGNATURE=$(HMAC-SHA256h $(HMAC-SHA256h $(HMAC-SHA256h $(HMAC-SHA256h $(HMAC-SHA256s $AWS4SECRET $REQUEST_DATE ) $REGION) "s3") "aws4_request") $UPLOAD_REQUEST)

    curl \
    	-F "key=""$KEY" \
    	-F "acl="$ACL"" \
    	-F "Content-Type="application/octet-stream"" \
    	-F "x-amz-algorithm="$ALGORITHM"" \
    	-F "x-amz-credential="$S3_KEY/$REQUEST_DATE/$REGION/s3/aws4_request"" \
    	-F "x-amz-date="$REQUEST_TIME"" \
    	-F "Policy="$UPLOAD_REQUEST"" \
    	-F "X-Amz-Signature="$SIGNATURE"" \
    	-F "file=@"$BACKUP_FILE_PATH http://$BUCKET.s3.amazonaws.com/

    echo
    echo "=====> Backup archive transferred to S3"
    echo "       https://s3.$REGION.amazonaws.com/$BUCKET/$KEY"
    echo
    echo       

  else
    echo
    echo "-----> S3 configuration file is not valid"
    echo "=====> Aborting S3 upload"
    echo
  fi  
}

list_users() {
  NOW=$(date -u +"%Y-%m-%dT%H.%M.%SZ")
  TMP_NAME="tmp_sinopia_$NOW"
  USERS=$(docker run -a stdout --name $TMP_NAME --volumes-from sinopia-storage creativecoding/sinopia-storage cat sinopia/htpasswd | awk -F':' '{ print $1}')
  docker rm $TMP_NAME > /dev/null
  echo
  echo "-----> List of the Sinopia Registry users:"
  echo
  echo "$USERS"
  echo
}

add_user() {
  NOW=$(date -u +"%Y-%m-%dT%H.%M.%SZ")
  TMP_NAME="tmp_sinopia_$NOW"
  USERNAME=$1
  
  CMD="cd sinopia && htpasswd -s htpasswd $USERNAME && exit 0"
  docker run -it --name $TMP_NAME --volumes-from sinopia-storage creativecoding/sinopia-storage /bin/bash -c "$CMD"
  docker rm $TMP_NAME > /dev/null
  echo
  list_users  
}

remove_user() {
  USERNAME=$1
  
  CMD="cd sinopia && htpasswd -D htpasswd $USERNAME"
  ID=$(docker run -d --volumes-from sinopia-storage creativecoding/sinopia-storage /bin/bash -c "$CMD")
  docker wait $ID > /dev/null
  docker rm $ID > /dev/null
  echo
  echo "-----> User '$USERNAME' removed"
  echo
  list_users
}

case "$1" in
  
  sinopia)
    if [[ ! -d $HOST_DIR ]]; then
      mkdir -p $BACKUPS_DIR
    fi
    
    if [[ -z $SINOPIA_IMAGE ]]; then
      build_sinopia_image
    fi
    if [[ -z $SINOPIA_STORAGE_IMAGE ]]; then
      build_sinopia_storage_image
    fi
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      init_storage_container
    fi
    if [[ -z $SINOPIA_CONTAINER ]]; then
      run_sinopia_container
    fi
    
    if [[ -z $SINOPIA_CONTAINER_RUNNING ]]; then
      SINOPIA_STATUS="stopped"
    else
      SINOPIA_STATUS="running"
      SINOPIA_IP=$(docker inspect $SINOPIA_CONTAINER | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    fi
    
    echo
    echo "-----> Infos about Sinopia registry:"
    echo
    echo "       Status: $SINOPIA_STATUS"
    echo "       Container: $SINOPIA_CONTAINER"
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
    echo "       Container IP: $SINOPIA_IP"
    echo "       Container PORT: 4873"
    fi
    echo
    ;;
    
  sinopia:stop)
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
      echo
      echo "-----> Stopping Sinopia container"
      ID=$(docker stop $SINOPIA_CONTAINER_RUNNING)
      docker wait $ID > /dev/null
      echo "       Done."
      echo
      dokku sinopia
    else
      echo
      echo "       Sinopia container is not running"
      echo
    fi
    ;;
    
  sinopia:start)
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
      echo
      echo "-----> Sinopia is already running"
      echo
      dokku sinopia
      exit 0
    else
    
      if [[ -z $SINOPIA_CONTAINER ]]; then
        dokku sinopia
      else
        echo
        echo "-----> Restarting Sinopia container..."
        docker start $SINOPIA_CONTAINER > /dev/null
        sleep 5
        echo "       Done."
        dokku sinopia
      fi
      
    fi
    ;;
    
  sinopia:expose)
    echo "expose"
    ;;
  
  sinopia:hide)
    echo "hide"
    ;;
    
  sinopia:backup)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    backup_sinopia
    ;;
    
  sinopia:reconfig)
    if [[ -f $CONFIG_FILE ]]; then
      echo
      echo "-----> Injecting config.yaml in Sinopia"
      ID=$(docker run -d --volumes-from sinopia-storage -v $HOST_DIR:/sinopia  ubuntu /bin/bash -c "cp /sinopia/config.yaml /data/sinopia/config.yaml")
      docker wait $ID > /dev/null
      docker rm $ID > /dev/null
      echo "       Done."
      
      if [[ -n $SINOPIA_CONTAINER_RUNNING ]]; then
        echo
        echo "-----> Restarting Sinopia"
        docker wait $(docker stop $SINOPIA_CONTAINER_RUNNING) > /dev/null
        docker rm $SINOPIA_CONTAINER_RUNNING > /dev/null
        run_sinopia_container
        dokku sinopia
      fi
    
    else
      echo
      echo "      Sinopia configuration file not found"
      echo "      Please save a configuration file as $CONFIG_FILE"
      echo    
    fi
    ;;
    
  sinopia:users)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    list_users
    ;;
    
  sinopia:adduser)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    USERNAME="$2"
    if [[ -z $USERNAME ]]; then
      echo
      echo "       Invalid command. Please type 'dokku sinopia:adduser <username> to add a user or modify a user password"
      echo
      exit 0
    fi
    add_user $USERNAME
    ;;
    
  sinopia:rmuser)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    
    USERNAME="$2"
    if [[ -z $USERNAME ]]; then
      echo
      echo "       Invalid command. Please type 'dokku sinopia:rmuser <username> to remove a user from the registry"
      echo
      exit 0
    fi
    remove_user $USERNAME    
    ;;

  help)
    cat && cat<<EOF
    sinopia                     Get infos about the private sinopia registry
    sinopia:users               Prints the list of the users able to authenticate to the registry
    sinopia:adduser <username>  Add a user to Sinopia or modify a user password
    sinopia:rmuser <username>   Remove a user from the Sinopia registry    
    sinopia:expose              Binds the sinopia container to a higher port on host (restarts sinopia)
    sinopia:hide                Unbinds the sinopia container from a port on host (restarts sinopia)
    sinopia:backup              Backups the sinopia storage folder
    sinopia:reconfig            Updates the sinopia config (restarts sinopia)
    sinopia:remove              Deletes the sinopia containers and the sinopia folder on dokku host
EOF
    ;;

esac
