#!/usr/bin/env bash
set -e;

HOST_DIR="$DOKKU_ROOT/.sinopia"
BACKUPS_DIR="$HOST_DIR/backups"
CONFIG_FILE="$HOST_DIR/config.yaml"

SINOPIA_IMAGE=$(docker images | grep creativecoding/sinopia | awk '{print $1}')
SINOPIA_CONTAINER=$(docker ps -a | grep sinopia-registry | awk '{print $1}')
SINOPIA_CONTAINER_RUNNING=$(docker ps | grep sinopia-registry | awk '{print $1}')
SINOPIA_STORAGE_IMAGE=$(docker images | grep creativecoding/sinopia-storage | awk '{print $1}')
SINOPIA_STORAGE_CONTAINER=$(docker ps -a | grep sinopia-storage | awk '{print $1}')

build_sinopia_image() {
  echo
  echo "-----> Sinopia image not found. Building..."
  docker build -q=true -t creativecoding/sinopia github.com/creativecodingos/dokku-sinopia-dockerfiles.git > /dev/null
  echo "       Image builded as creativecoding/sinopia"
  echo
}

# We use the data only container pattern
# http://container42.com/2013/12/16/persistent-volumes-with-docker-container-as-volume-pattern/
build_sinopia_storage_image() {
  echo
  echo "-----> Sinopia storage image not found. Building..."
  docker build -q=true -t creativecoding/sinopia-storage github.com/creativecodingos/dokku-sinopia-storage-dockerfiles.git > /dev/null
  echo "       Image builded as creativecoding/sinopia-storage"
  echo
}

init_storage_container() {
  echo "-----> Initializing the sinopia storage container..."
  SINOPIA_STORAGE_CONTAINER=$(docker run -d --name sinopia-storage creativecoding/sinopia-storage /bin/bash "exit 0")
  docker wait $SINOPIA_STORAGE_CONTAINER > /dev/null
  echo "       Done."
  echo
}

run_sinopia_container() {
  echo
  echo "-----> Starting Sinopia container..."
  SINOPIA_CONTAINER=$(docker run -d -P --name sinopia-registry --volumes-from sinopia-storage creativecoding/sinopia)
  SINOPIA_CONTAINER_RUNNING=$SINOPIA_CONTAINER
  sleep 5
  ## copy the running config.yaml to the host for user editing
  ID=$(docker run -d --volumes-from sinopia-storage -v $HOST_DIR:/sinopia  ubuntu /bin/bash -c "cp /data/sinopia/config.yaml /sinopia/config.yaml")
  docker wait $ID > /dev/null
  docker rm $ID > /dev/null
  echo "       Done."
  echo
}

backup_sinopia() {
  echo
  echo "-----> Starting backup of Sinopia"
  echo 
  NOW=$(date -u +"%Y-%m-%dT%H.%M.%SZ")
  BACKUP_FILE="Sinopia_backup_$NOW.tar.gz"
  ID=$(docker run -d --volumes-from sinopia-storage -v $BACKUPS_DIR:/backups ubuntu tar -czf /backups/$BACKUP_FILE -C /data ./sinopia)
  docker wait $ID > /dev/null
  docker rm $ID > /dev/null
  echo
  echo "-----> Backup file avaliable: $BACKUPS_DIR/$BACKUP_FILE"
  echo
}

list_users() {
  USERS=$(docker run -a stdout --name tmp_sinopia --volumes-from sinopia-storage creativecoding/sinopia-storage cat sinopia/htpasswd | awk -F':' '{ print $1}')
  docker rm tmp_sinopia > /dev/null
  echo
  echo "-----> List of the Sinopia Registry users:"
  echo "       $USERS"
  echo
}

case "$1" in
  
  sinopia)
    if [[ ! -d $HOST_DIR ]]; then
      mkdir -p $BACKUPS_DIR
    fi
    
    if [[ -z $SINOPIA_IMAGE ]]; then
      build_sinopia_image
    fi
    if [[ -z $SINOPIA_STORAGE_IMAGE ]]; then
      build_sinopia_storage_image
    fi
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      init_storage_container
    fi
    if [[ -z $SINOPIA_CONTAINER ]]; then
      run_sinopia_container
    fi
    
    if [[ -z $SINOPIA_CONTAINER_RUNNING ]]; then
      SINOPIA_STATUS="stopped"
    else
      SINOPIA_STATUS="running"
      SINOPIA_IP=$(docker inspect $SINOPIA_CONTAINER | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    fi
    
    echo
    echo "-----> Infos about Sinopia registry:"
    echo
    echo "       Status: $SINOPIA_STATUS"
    echo "       Container: $SINOPIA_CONTAINER"
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
    echo "       Container IP: $SINOPIA_IP"
    echo "       Container PORT: 4873"
    fi
    echo
    ;;
    
  sinopia:stop)
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
      echo
      echo "-----> Stopping Sinopia container"
      ID=$(docker stop $SINOPIA_CONTAINER_RUNNING)
      docker wait $ID > /dev/null
      echo "       Done."
      echo
      dokku sinopia
    else
      echo
      echo "       Sinopia container is not running"
      echo
    fi
    ;;
    
  sinopia:start)
    if [[ ! -z $SINOPIA_CONTAINER_RUNNING ]]; then
      echo
      echo "-----> Sinopia is already running"
      echo
      dokku sinopia
      exit 0
    else
    
      if [[ -z $SINOPIA_CONTAINER ]]; then
        dokku sinopia
      else
        echo
        echo "-----> Restarting Sinopia container..."
        docker start $SINOPIA_CONTAINER > /dev/null
        sleep 5
        echo "       Done."
        dokku sinopia
      fi
      
    fi
    ;;
    
  sinopia:expose)
    echo "expose"
    ;;
  
  sinopia:hide)
    echo "hide"
    ;;
    
  sinopia:backup)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    backup_sinopia
    ;;
    
  sinopia:reconfig)
    if [[ -f $CONFIG_FILE ]]; then
      echo
      echo "-----> Injecting config.yaml in Sinopia"
      ID=$(docker run -d --volumes-from sinopia-storage -v $HOST_DIR:/sinopia  ubuntu /bin/bash -c "cp /sinopia/config.yaml /data/sinopia/config.yaml")
      docker wait $ID > /dev/null
      docker rm $ID > /dev/null
      echo "       Done."
      
      if [[ -n $SINOPIA_CONTAINER_RUNNING ]]; then
        echo
        echo "-----> Restarting Sinopia"
        docker wait $(docker stop $SINOPIA_CONTAINER_RUNNING) > /dev/null
        docker rm $SINOPIA_CONTAINER_RUNNING > /dev/null
        run_sinopia_container
        dokku sinopia
      fi
    
    else
      echo
      echo "      Sinopia configuration file not found"
      echo "      Please save a configuration file as $CONFIG_FILE"
      echo    
    fi
    ;;
    
  sinopia:users)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    list_users
    ;;
    
  sinopia:adduser)
    if [[ -z $SINOPIA_STORAGE_CONTAINER ]]; then
      echo
      echo "-----> There are no data of a Sinopia installation"
      echo "       Pleas run 'dokku sinopia' to start a Sinopia registry"
      echo
      exit 0
    fi
    USERNAME="$2"
    PASSWORD="$3"
    if [[ -z $USERNAME ]]; then
      echo
      echo "       Invalid command. Please type 'dokku sinopia:adduser <username> [<password>]' to add a user or modify a user password"
      echo
      exit 0
    fi
    add_user $USERNAME $PASSWORD    
    ;;
    
  sinopia:remove)
    
    ;;

  help)
    cat && cat<<EOF
    sinopia                     Get infos about the private sinopia registry
    sinopia:expose              Binds the sinopia container to a higher port on host (restarts sinopia)
    sinopia:hide                Unbinds the sinopia container from a port on host (restarts sinopia)
    sinopia:backup              Backups the sinopia storage folder
    sinopia:reconfig            Updates the sinopia config (restarts sinopia)
    sinopia:remove              Deletes the sinopia containers and the sinopia folder on dokku host
EOF
    ;;

esac
